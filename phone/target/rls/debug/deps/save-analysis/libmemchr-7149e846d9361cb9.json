{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11","program":"/Users/slixperi/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","memchr","/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=7149e846d9361cb9","-C","extra-filename=-7149e846d9361cb9","--out-dir","/Users/slixperi/Desktop/dev/rust/phone/target/rls/debug/deps","-L","dependency=/Users/slixperi/Desktop/dev/rust/phone/target/rls/debug/deps","--extern","libc=/Users/slixperi/Desktop/dev/rust/phone/target/rls/debug/deps/liblibc-9070217966b7af8c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/slixperi/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/slixperi/Desktop/dev/rust/phone/target/rls/debug/deps/libmemchr-7149e846d9361cb9.rmeta"},"prelude":{"crate_id":{"name":"memchr","disambiguator":[13511895741040194962,2631016144970931435]},"crate_root":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src","external_crates":[{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9054049529852543209,5756799355281213394]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[649336883146201894,3308516238322163950]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1154582834482060450,16344204990542480537]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9212379515936652129,17808485286264063370]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13327579764654116281,14306064291630426625]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17773251733480933597,18239998491734583498]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8567743581675804787,15655200220621371766]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15115520782807859583,9813785573872252500]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1572943810868196833,3902827232285166711]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[6290371580101917419,15395902185345451181]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[2934540361684350378,924291485644145262]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[9277678418438935259,15657907931940784437]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5423566938548125357,18340948646597872466]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[489208416821938960,3305070343783546974]}},{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","num":15,"id":{"name":"libc","disambiguator":[7771889538905738529,2139923462591119144]}}],"span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":0,"byte_end":18568,"line_start":1,"line_end":613,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":0,"byte_end":18568,"line_start":1,"line_end":613,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":25},{"krate":0,"index":30}],"decl_id":null,"docs":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.\n","sig":null,"attributes":[{"value":"!\nThis crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.\n*/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":0,"byte_end":136,"line_start":1,"line_end":4,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":138,"byte_end":160,"line_start":6,"line_end":6,"column_start":1,"column_end":23}},{"value":"allow(unused_imports)","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":161,"byte_end":186,"line_start":7,"line_end":7,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":15},"span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1918,"byte_end":1924,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"memchr","qualname":"::memchr","value":"fn (needle: u8, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" A safe interface to `memchr`.","sig":null,"attributes":[{"value":"/ A safe interface to `memchr`.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1293,"byte_end":1326,"line_start":55,"line_end":55,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1327,"byte_end":1330,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Returns the index corresponding to the first occurrence of `needle` in","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1331,"byte_end":1405,"line_start":57,"line_end":57,"column_start":1,"column_end":75}},{"value":"/ `haystack`, or `None` if one is not found.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1406,"byte_end":1452,"line_start":58,"line_end":58,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1453,"byte_end":1456,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ memchr reduces to super-optimized machine code at around an order of","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1457,"byte_end":1529,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/ magnitude faster than `haystack.iter().position(|&b| b == needle)`.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1530,"byte_end":1601,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/ (See benchmarks.)","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1602,"byte_end":1623,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1628,"byte_end":1641,"line_start":64,"line_end":64,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1642,"byte_end":1645,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of a byte in a byte string.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1646,"byte_end":1719,"line_start":66,"line_end":66,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1720,"byte_end":1723,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1724,"byte_end":1735,"line_start":68,"line_end":68,"column_start":1,"column_end":12}},{"value":"/ use memchr::memchr;","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1736,"byte_end":1759,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1760,"byte_end":1763,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1764,"byte_end":1806,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr(b'k', haystack), Some(8));","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1807,"byte_end":1855,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1856,"byte_end":1863,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":1864,"byte_end":1881,"line_start":74,"line_end":74,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3430,"byte_end":3437,"line_start":124,"line_end":124,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::memrchr","value":"fn (needle: u8, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" A safe interface to `memrchr`.","sig":null,"attributes":[{"value":"/ A safe interface to `memrchr`.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":2974,"byte_end":3008,"line_start":108,"line_end":108,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3009,"byte_end":3012,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ Returns the index corresponding to the last occurrence of `needle` in","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3013,"byte_end":3086,"line_start":110,"line_end":110,"column_start":1,"column_end":74}},{"value":"/ `haystack`, or `None` if one is not found.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3087,"byte_end":3133,"line_start":111,"line_end":111,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3134,"byte_end":3137,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3138,"byte_end":3151,"line_start":113,"line_end":113,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3152,"byte_end":3155,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of a byte in a byte string.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3156,"byte_end":3228,"line_start":115,"line_end":115,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3229,"byte_end":3232,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3233,"byte_end":3244,"line_start":117,"line_end":117,"column_start":1,"column_end":12}},{"value":"/ use memchr::memrchr;","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3245,"byte_end":3269,"line_start":118,"line_end":118,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3270,"byte_end":3273,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3274,"byte_end":3316,"line_start":120,"line_end":120,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr(b'o', haystack), Some(17));","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3317,"byte_end":3367,"line_start":121,"line_end":121,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3368,"byte_end":3375,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"inline(always)","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":3376,"byte_end":3393,"line_start":123,"line_end":123,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":4779,"byte_end":4786,"line_start":162,"line_end":162,"column_start":8,"column_end":15},"name":"memchr2","qualname":"::memchr2","value":"fn (needle1: u8, needle2: u8, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for two bytes instead of one.\n","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for two bytes instead of one.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":4710,"byte_end":4771,"line_start":161,"line_end":161,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":25},"span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":5982,"byte_end":5989,"line_start":198,"line_end":198,"column_start":8,"column_end":15},"name":"memchr3","qualname":"::memchr3","value":"fn (needle1: u8, needle2: u8, needle3: u8, haystack: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for three bytes instead of one.\n","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for three bytes instead of one.","span":{"file_name":"/Users/slixperi/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-0.1.11/src/lib.rs","byte_start":5911,"byte_end":5974,"line_start":197,"line_end":197,"column_start":1,"column_end":64}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}